(function () {
    'use strict';

    angular
        .module('app.loadedCellsModule')
        .factory('loadedCellsData', loadedCellsData);

    loadedCellsData.$inject = ['$log'];

    function loadedCellsData($log) {

        var self = this;

        self.Status = {
            LOADING: 0,
            ERROR: -1,
            OK: 1
        };

        var service = {
            getColumnDefs: getColumnDefs,
            getInitialData: getInitialData,
            getHeaderData: getHeaderData,
            updateInitialData: updateInitialData,
            updateDataStatus: updateDataStatus,
            updateDataStatusAndLabels: updateDataStatusAndLabels,
            updateDataRemoveErrors: updateDataRemoveErrors
        };

        service.Status = self.Status;

        return service;

        /**
         * @name getColumnDefs
         * @param header - generated by getHeaderData
         * @returns List columns
         */
        function getColumnDefs(header) {
            var columns = [];

            header.forEach(function (column, i) {
                columns.push({
                    field: column,
                    displayName: column,
                    width: 100
                });
            });

            return columns;
        }

        /**
         * @name getHeaderData
         * @returns List columns
         */
        function getHeaderData() {
            return ['status', 'id', 'label'];
        }

        /**
         * @name getInitialData
         * @returns List of rows - each row contains fields: status, id, and label.
         */
        function getInitialData(cellIds) {

            var rows = [];

            cellIds.forEach(function (cellId) {
                var row = {
                    status: self.Status.LOADING,
                    id: cellId,
                    label: '-'
                };

                rows.push(row);
            });

            return rows;

        }

        /**
         * @name updateDataStatusAndLabels
         * @param data - the current state of data
         * @param cellIds - list of cell ids that will be updated
         * @param labels - list of new cell labels. Must be in same order as cellIds
         * @param invalidCellIds - list of fucked cell ids. these will be marked as errors.
         * @desc - updates the 'data' to display the labels and status of invalid cellIds is set to error. The status
         *          of original cellIds is left unchanged.
         */
        function updateDataStatusAndLabels(data, cellIds, labels, invalidCellIds) {

            // Update the status of invalidCellIds to 'error'
            if (invalidCellIds.length > 0) {
                invalidCellIds.forEach(function (cellId) {
                    data.forEach(function (row) {
                        if (row.id == cellId) {
                            row.status = self.Status.ERROR;
                        }
                    });
                });
            }

            cellIds.forEach(function (cellId, i) {
                data.forEach(function (row) {
                    if (row.id == cellId) {
                        row.label = labels[i];
                    }
                });
            });
        }

        /**
         * @name updateDataStatus
         * @param data - the current state of data
         * @param cellIds - list of cell ids whose status will be updated
         * @param status - list of status in the same order as cell ids
         */
        function updateDataStatus(data, cellIds, status) {
            cellIds.forEach(function (cellId, i) {
                data.forEach(function (row) {
                    if (row.id == cellId) {
                        row.status = status[i];
                    }
                });
            });
        }

        /**
         * @name updateDataRemoveErrors
         * @param data - the current state of data
         * @desc - for each row in the data, remove that row if the status is error
         */
        function updateDataRemoveErrors(data) {
            for (var i = 0; i < data.length; ++i) {
                if (data[i].status == self.Status.ERROR) {
                    data = data.splice(i, 1);
                }
            }
        }

        /**
         * @name updateInitialData
         * @param data - the current state of data
         * @param cellIds - new cell ids starting to be loaded
         * @returns List of rows in the table with cellIds added to it.
         */
        function updateInitialData(data, cellIds) {
            data = data.concat(getInitialData(cellIds));
            return data;
        }

    }

})();

